import tensorflow as tf
from tensorflow import keras
import numpy as np
import matplotlib.pyplot as plt

#%%
def plot_loss(history, keyword):
    plt.figure()
    plt.plot(history.history[keyword + 'loss'],'o-')
    plt.plot(history.history['val_'+keyword+'loss'],'o-')
    plt.yscale('log')
    plt.title('model ' +keyword+ 'loss')
    plt.ylabel('loss')
    plt.xlabel('epoch')
    plt.legend(['train', 'validation'], loc='upper left')
    plt.show()

def check_Params(Params_test,p,Number):
    fig, axes = plt.subplots(nrows=2, ncols=5,figsize=(15,5))
    ax = axes.ravel()
    P0 = ax[0].imshow(Params_test[0][Number,:,:], cmap='gray')
    P0.set_clim(.0,1)
    ax[0].title.set_text('a')
    plt.colorbar(P0,ax=ax[0])
    P1 = ax[1].imshow(Params_test[1][Number,:,:], cmap='gray')
    P1.set_clim(.0,1)
    ax[1].title.set_text('b')
    plt.colorbar(P1,ax=ax[1])
    P2 = ax[2].imshow(Params_test[2][Number,:,:], cmap='gray')
    P2.set_clim(.0,1)
    ax[2].title.set_text('c')
    plt.colorbar(P2,ax=ax[2])
    P3 = ax[3].imshow(Params_test[3][Number,:,:], cmap='gray')
    P3.set_clim(.0,1)
    ax[3].title.set_text('d')
    plt.colorbar(P3,ax=ax[3])
    P4 = ax[4].imshow(Params_test[4][Number,:,:], cmap='gray')
    P4.set_clim(.0,1)
    ax[4].title.set_text('e')
    plt.colorbar(P4,ax=ax[4])
    P5 = ax[5].imshow(np.squeeze(p[0][Number,:,:,:]), cmap='gray')
    P5.set_clim(.0,1)
    plt.colorbar(P5,ax=ax[5])
    P6 = ax[6].imshow(np.squeeze(p[1][Number,:,:,:]), cmap='gray')
    P6.set_clim(.0,1)
    plt.colorbar(P6,ax=ax[6])
    P7 = ax[7].imshow(np.squeeze(p[2][Number,:,:,:]), cmap='gray')
    P7.set_clim(.0,1)
    plt.colorbar(P7,ax=ax[7])
    P8 = ax[8].imshow(np.squeeze(p[3][Number,:,:,:]), cmap='gray')
    P8.set_clim(.0,1)
    plt.colorbar(P8,ax=ax[8])
    P9 = ax[9].imshow(np.squeeze(p[4][Number,:,:,:]), cmap='gray')
    P9.set_clim(.0,1)
    plt.colorbar(P9,ax=ax[9])
    plt.show()

    fig, axes = plt.subplots(nrows=1, ncols=5,figsize=(15,5))
    ax = axes.ravel()
    ax[0].plot(Params_test[0][Number,15,:],'.')
    ax[0].plot(np.squeeze(p[0][Number,15,:,:]),'.')
    ax[0].set_ylim(0,1)
    ax[0].title.set_text('a')
    ax[1].plot(Params_test[1][Number,15,:],'.')
    ax[1].plot(np.squeeze(p[1][Number,15,:,:]),'.')
    ax[1].set_ylim(0,1)
    ax[1].title.set_text('b')
    ax[2].plot(Params_test[2][Number,15,:],'.')
    ax[2].plot(np.squeeze(p[2][Number,15,:,:]),'.')
    ax[2].set_ylim(0,1)
    ax[2].title.set_text('c')
    ax[3].plot(Params_test[3][Number,15,:],'.')
    ax[3].plot(np.squeeze(p[3][Number,15,:,:]),'.')
    ax[3].set_ylim(0,1)
    ax[3].title.set_text('d')
    ax[4].plot(Params_test[4][Number,15,:],'.')
    ax[4].plot(np.squeeze(p[4][Number,15,:,:]),'.')
    ax[4].set_ylim(0,1)
    ax[4].title.set_text('e')
    plt.show()


    fig, axes = plt.subplots(nrows=2, ncols=5,figsize=(15,5))
    ax = axes.ravel()
    ax[0].hist(Params_test[0][Number,:,:].ravel(),range=((0,1)))
    ax[0].title.set_text('a')
    ax[1].hist(Params_test[1][Number,:,:].ravel(),range=((0,1)))
    ax[1].title.set_text('b')
    ax[2].hist(Params_test[2][Number,:,:].ravel(),range=((0,1)))
    ax[2].title.set_text('c')
    ax[3].hist(Params_test[3][Number,:,:].ravel(),range=((0,1)))
    ax[3].title.set_text('d')
    ax[4].hist(Params_test[4][Number,:,:].ravel(),range=((0,1)))
    ax[4].title.set_text('e')
    ax[5].hist(np.squeeze(p[0][Number,:,:,:]).ravel(),range=((0,1)))
    ax[6].hist(np.squeeze(p[1][Number,:,:,:]).ravel(),range=((0,1)))
    ax[7].hist(np.squeeze(p[2][Number,:,:,:]).ravel(),range=((0,1)))
    ax[8].hist(np.squeeze(p[3][Number,:,:,:]).ravel(),range=((0,1)))
    ax[9].hist(np.squeeze(p[4][Number,:,:,:]).ravel(),range=((0,1)))
    plt.show()

def translate_Params(Params):
    S0 = Params[0]   #S0     = 1000 + 200 * randn(N).T
    R2 = (30-1) * Params[1] + 1  #from 1 to 30
    SaO2 = 0.98
    Y  = (SaO2 - 0.01) * Params[2] + 0.01   #from 1% to 98%
    nu = (0.1 - 0.001) * Params[3] + 0.001  #from 0.1% to 10%
    chi_nb = ( 0.1-(-0.1) ) * Params[4] - 0.1 #fr
    return [S0,R2,Y,nu,chi_nb]

def check_Params_transformed(Params_test,p,Number):
    fig, axes = plt.subplots(nrows=2, ncols=5,figsize=(15,5))
    ax = axes.ravel()
    P0 = ax[0].imshow(Params_test[0][Number,:,:], cmap='gray')
    P0.set_clim(.0,1)
    ax[0].title.set_text('S0')
    plt.colorbar(P0,ax=ax[0])
    P1 = ax[1].imshow(Params_test[1][Number,:,:], cmap='gray')
    P1.set_clim(0,30)
    ax[1].title.set_text('R2')
    plt.colorbar(P1,ax=ax[1])
    P2 = ax[2].imshow(Params_test[2][Number,:,:], cmap='gray')
    P2.set_clim(.0,1)
    ax[2].title.set_text('Y')
    plt.colorbar(P2,ax=ax[2])
    P3 = ax[3].imshow(Params_test[3][Number,:,:], cmap='gray')
    P3.set_clim(0,0.1)
    ax[3].title.set_text('nu')
    plt.colorbar(P3,ax=ax[3])
    P4 = ax[4].imshow(Params_test[4][Number,:,:], cmap='gray')
    P4.set_clim(-.1,.1)
    ax[4].title.set_text('chi_nb')
    plt.colorbar(P4,ax=ax[4])
    P5 = ax[5].imshow(np.squeeze(p[0][Number,:,:,:]), cmap='gray')
    P5.set_clim(.0,1)
    plt.colorbar(P5,ax=ax[5])
    P6 = ax[6].imshow(np.squeeze(p[1][Number,:,:,:]), cmap='gray')
    P6.set_clim(0,30)
    plt.colorbar(P6,ax=ax[6])
    P7 = ax[7].imshow(np.squeeze(p[2][Number,:,:,:]), cmap='gray')
    P7.set_clim(.0,1)
    plt.colorbar(P7,ax=ax[7])
    P8 = ax[8].imshow(np.squeeze(p[3][Number,:,:,:]), cmap='gray')
    P8.set_clim(.0,0.1)
    plt.colorbar(P8,ax=ax[8])
    P9 = ax[9].imshow(np.squeeze(p[4][Number,:,:,:]), cmap='gray')
    P9.set_clim(-.1,.1)
    plt.colorbar(P9,ax=ax[9])
    plt.show()

    fig, axes = plt.subplots(nrows=1, ncols=5,figsize=(15,5))
    ax = axes.ravel()
    ax[0].plot(Params_test[0][Number,15,:],'.')
    ax[0].plot(np.squeeze(p[0][Number,15,:,:]),'.')
    ax[0].set_ylim(0,1)
    ax[0].title.set_text('S0')
    ax[1].plot(Params_test[1][Number,15,:],'.')
    ax[1].plot(np.squeeze(p[1][Number,15,:,:]),'.')
    ax[1].set_ylim(0,30)
    ax[1].title.set_text('R2')
    ax[2].plot(Params_test[2][Number,15,:],'.')
    ax[2].plot(np.squeeze(p[2][Number,15,:,:]),'.')
    ax[2].set_ylim(0,1)
    ax[2].title.set_text('Y')
    ax[3].plot(Params_test[3][Number,15,:],'.')
    ax[3].plot(np.squeeze(p[3][Number,15,:,:]),'.')
    ax[3].set_ylim(0,0.1)
    ax[3].title.set_text('nu')
    ax[4].plot(Params_test[4][Number,15,:],'.')
    ax[4].plot(np.squeeze(p[4][Number,15,:,:]),'.')
    ax[4].set_ylim(-.1,.1)
    ax[4].title.set_text('chi_nb')
    plt.show()


    fig, axes = plt.subplots(nrows=2, ncols=5,figsize=(15,5))
    ax = axes.ravel()
    ax[0].hist(Params_test[0][Number,:,:].ravel(),range=((0,1)))
    ax[0].title.set_text('S0')
    ax[1].hist(Params_test[1][Number,:,:].ravel(),range=((0,30)))
    ax[1].title.set_text('R2')
    ax[2].hist(Params_test[2][Number,:,:].ravel(),range=((0,1)))
    ax[2].title.set_text('Y')
    ax[3].hist(Params_test[3][Number,:,:].ravel(),range=((0,0.1)))
    ax[3].title.set_text('nu')
    ax[4].hist(Params_test[4][Number,:,:].ravel(),range=((-.1,.1)))
    ax[4].title.set_text('chi_nb')
    ax[5].hist(np.squeeze(p[0][Number,:,:,:]).ravel(),range=((0,1)))
    ax[6].hist(np.squeeze(p[1][Number,:,:,:]).ravel(),range=((0,30)))
    ax[7].hist(np.squeeze(p[2][Number,:,:,:]).ravel(),range=((0,1)))
    ax[8].hist(np.squeeze(p[3][Number,:,:,:]).ravel(),range=((0,.1)))
    ax[9].hist(np.squeeze(p[4][Number,:,:,:]).ravel(),range=((-.1,.1)))
    plt.show()

def check_QSM(t,p,Number): #target prediction
    fig, axes = plt.subplots(nrows=2, ncols=1)
    ax = axes.ravel()
    P0=ax[0].imshow(t[Number,:,:,0], cmap='gray')
    ax[0].title.set_text('QSM')
    plt.colorbar(P0,ax=ax[0])
    P1=ax[1].imshow(p[Number,:,:,0], cmap='gray')
    #ax[1].title.set_text('QSM_pred')
    plt.colorbar(P1,ax=ax[1])
    plt.show()

def check_qBOLD(t,p,Number): #target prediction
    fig, axes = plt.subplots(nrows=2, ncols=5,figsize=(15,5))
    ax = axes.ravel()

    P0=ax[0].imshow(t[Number,:,:,0], cmap='gray')
    ax[0].title.set_text('3ms')
    #plt.colorbar(P0,ax=ax[0])
    P0.set_clim(.0,1)

    P1=ax[1].imshow(t[Number,:,:,3], cmap='gray')
    ax[1].title.set_text('9ms')
    #plt.colorbar(P1,ax=ax[1])
    P1.set_clim(.0,1)

    P2=ax[2].imshow(t[Number,:,:,7], cmap='gray')
    ax[2].title.set_text('21ms')
    #plt.colorbar(P2,ax=ax[2])
    P2.set_clim(.0,1)

    P3=ax[3].imshow(t[Number,:,:,11], cmap='gray')
    ax[3].title.set_text('33ms')
    #plt.colorbar(P3,ax=ax[3])
    P3.set_clim(.0,1)

    P4=ax[4].imshow(t[Number,:,:,15], cmap='gray')
    ax[4].title.set_text('45ms')
    plt.colorbar(P4,ax=ax[4])
    P4.set_clim(.0,1)

    P5=ax[5].imshow(p[Number,:,:,0], cmap='gray')
    #plt.colorbar(P5,ax=ax[5])
    P5.set_clim(.0,1)

    P6=ax[6].imshow(p[Number,:,:,3], cmap='gray')
    #plt.colorbar(P6,ax=ax[6])
    P6.set_clim(.0,1)

    P7=ax[7].imshow(p[Number,:,:,7], cmap='gray')
    #plt.colorbar(P7,ax=ax[7])
    P7.set_clim(.0,1)

    P8=ax[8].imshow(p[Number,:,:,11], cmap='gray')
    #plt.colorbar(P8,ax=ax[8])
    P8.set_clim(.0,1)

    P9=ax[9].imshow(p[Number,:,:,15], cmap='gray')
    plt.colorbar(P9,ax=ax[9])
    P9.set_clim(.0,1)
    plt.show()

def check_Pixel(target,prediction,QSM_t,QSM_p,Number):
    t=np.array([3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48])/1000
    plt.figure()
    plt.imshow(target[Number,:,:,0], cmap='gray')
    plt.plot([5,10,15,20,25],[15,15,15,15,15],'o')
    plt.show()
    fig, axes = plt.subplots(nrows=1, ncols=2,figsize=(10,5))
    ax = axes.ravel()
    ax[0].plot(t,target[Number,5,15,:],"o-r")
    ax[0].plot(t,prediction[Number,5,15,:],"o-b")
    ax[0].set_ylim(0,1)
    ax[1].plot("QSM",QSM_t[Number,5,15,0],"or")
    ax[1].plot("QSM",QSM_p[Number,5,15,0],"ob")
    ax[1].set_ylim(-0.15,0.15)
    plt.show()
    fig, axes = plt.subplots(nrows=1, ncols=2,figsize=(10,5))
    ax = axes.ravel()
    ax[0].plot(t,target[Number,10,15,:],"o-r")
    ax[0].plot(t,prediction[Number,10,15,:],"o-b")
    ax[0].set_ylim(0,1)
    ax[1].plot("QSM",QSM_t[Number,10,15,0],"or")
    ax[1].plot("QSM",QSM_p[Number,10,15,0],"ob")
    ax[1].set_ylim(-0.15,0.15)
    plt.show(    )
    fig, axes = plt.subplots(nrows=1, ncols=2,figsize=(10,5))
    ax = axes.ravel()
    ax[0].plot(t,target[Number,15,15,:],"o-r")
    ax[0].plot(t,prediction[Number,15,15,:],"o-b")
    ax[0].set_ylim(0,1)
    ax[1].plot("QSM",QSM_t[Number,15,15,0],"or")
    ax[1].plot("QSM",QSM_p[Number,15,15,0],"ob")
    ax[1].set_ylim(-0.15,0.15)
    plt.show()
    fig, axes = plt.subplots(nrows=1, ncols=2,figsize=(10,5))
    ax = axes.ravel()
    ax[0].plot(t,target[Number,20,15,:],"o-r")
    ax[0].plot(t,prediction[Number,20,15,:],"o-b")
    ax[0].set_ylim(0,1)
    ax[1].plot("QSM",QSM_t[Number,20,15,0],"or")
    ax[1].plot("QSM",QSM_p[Number,20,15,0],"ob")
    ax[1].set_ylim(-0.15,0.15)
    plt.show()
    fig, axes = plt.subplots(nrows=1, ncols=2,figsize=(10,5))
    ax = axes.ravel()
    ax[0].plot(t,target[Number,25,15,:],"o-r")
    ax[0].plot(t,prediction[Number,25,15,:],"o-b")
    ax[0].set_ylim(0,1)
    ax[1].plot("QSM",QSM_t[Number,25,15,0],"or")
    ax[1].plot("QSM",QSM_p[Number,25,15,0],"ob")
    ax[1].set_ylim(-0.15,0.15)
    plt.show()
